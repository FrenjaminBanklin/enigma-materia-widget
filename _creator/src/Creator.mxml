<?xml version = "1.0" encoding = "utf-8"?>
<materia:CreatorBase xmlns:mx="http://www.adobe.com/2006/mxml"
					 xmlns:materia="materia.*"
					 xmlns:components="materia.components.*"
                     width="100%" height="100%">
	<materia:states>
		<mx:State name = "editingQuestion">
			<mx:AddChild relativeTo = "{canvas1}" position = "lastChild">
				<mx:Canvas left = "0"
						   top = "0"
						   bottom = "0"
						   right = "0"
						   backgroundColor = "#000000"
						   backgroundAlpha = "0.38">
					<mx:TitleWindow id = "editingQuestionPanel"
									close = "closeEditWindow()"
									width = "95%"
									height = "90%"
									layout = "absolute"
									horizontalCenter = "0"
									verticalCenter = "0"
									styleName = "EnigmaQuestionEditPanel"
									title = "Editing Question 1 of Category Name"
									horizontalAlign = "center"
									verticalAlign = "middle"
									showCloseButton = "true">
						<mx:VBox top = "0"
								 bottom = "10"
								 left = "10"
								 right = "10"
								 horizontalAlign = "right">
							<mx:Canvas width = "100%" height = "100%">
								<mx:HBox left = "0" top = "10" bottom = "10" right = "0">
									<mx:VBox height = "100%" width = "100%">
										<mx:TileList id = "questionTileList"
													 height = "82"
													 backgroundColor = "#FFFFFF"
													 itemRenderer = "EnigmaTinyQuestion"
													 dragEnabled = "true"
													 dropEnabled = "true"
													 dragMoveEnabled = "true"
													 backgroundAlpha = "0"
													 dragStart = "{answersDataGrid.dropEnabled=false}"
													 borderThickness = "0"
													 dragComplete = "{reOrderQuestions();answersDataGrid.dropEnabled=true;}"
													 change = "changeSelectedQuestion()"
													 width = "100%"
													 dropIndicatorSkin = "@Embed(source='/assets/dropIndicator.swf')">
										</mx:TileList>
										<mx:Label styleName = "textFeildLabel" text = "Question:" />
										<mx:Canvas width = "100%" height = "100%">
											<mx:TextArea styleName = "textFeildEdit"
														 change = "updateQuestionText()"
														 id = "questionText"
														 focusIn = "{questionText.setSelection(0,questionText.text.length)}"
														 left = "10"
														 top = "0"
														 bottom = "0"
														 right = "10" />
										</mx:Canvas>
									</mx:VBox>
									<mx:VBox height = "100%" width = "100%" horizontalAlign = "right">
										<mx:HBox width = "100%" height = "31" verticalAlign = "middle">
											<mx:Label styleName = "textFeildLabel" text = "Answers:" />
											<mx:Button label = "Add Answer"
													   click = "{addAnswer()}"
													   styleName = "gameButtonSmall"
													   buttonMode = "true"
													   height = "23" />
										</mx:HBox>
										<mx:Canvas width = "100%" height = "100%">
											<mx:Canvas left = "10"
													   bottom = "0"
													   top = "0"
													   right = "0"
													   backgroundColor = "#31394B">
												<mx:List id = "answersDataGrid"
														 rowHeight = "104"
														 dataProvider = "{answerArrayCollection}"
														 left = "10"
														 top = "10"
														 bottom = "10"
														 right = "10"
														 dragStart = "{questionTileList.dropEnabled=false}"
														 dragComplete = "{reOrderLetters();questionTileList.dropEnabled=true}"
														 dropEnabled = "true"
														 dragEnabled = "true"
														 dragMoveEnabled = "true"
														 itemRenderer = "answerGrid"
														 alternatingItemColors = "[0xf3f3f3, 0xfdfdfd]" />
											</mx:Canvas>
										</mx:Canvas>
									</mx:VBox>
								</mx:HBox>
							</mx:Canvas>
							<mx:HBox horizontalAlign = "right" x = "560" y = "557" verticalAlign = "top">
								<mx:Button label = "Cancel" styleName = "gameButtonSmall" click = "closeEditWindowNoSave()" />
								<mx:Button label = "Done" styleName = "gameButtonSmall" buttonMode = "true" click = "{closeEditWindow()}" />
							</mx:HBox>
						</mx:VBox>
					</mx:TitleWindow>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
		<mx:State name = "importedQuestions">
			<mx:AddChild relativeTo = "{hbox1}" position = "lastChild">
				<mx:Canvas width = "257"
						   height = "100%"
						   id = "canvas2"
						   cornerRadius = "7"
						   backgroundColor = "#333333"
						   borderStyle = "solid">
					<mx:VBox left = "10"
							 top = "10"
							 bottom = "10"
							 right = "10"
							 horizontalAlign = "center"
							 id = "vbox1">
						<mx:Canvas width = "100%" height = "37" id = "canvas3">
							<mx:Text styleName = "ETitle"
									 text = "Imported Questions"
									 id = "text1"
									 horizontalCenter = "0"
									 verticalCenter = "0" />
						</mx:Canvas>
						<mx:TileList id = "importedQuestionsTileList"
									 itemRenderer = "EnigmaQuestion"
									 dragEnabled = "true"
									 dropEnabled = "true"
									 dragMoveEnabled = "true"
									 backgroundColor = "#333333"
									 backgroundAlpha = "35"
									 dropIndicatorSkin = "@Embed(source='/assets/dropIndicator.swf')"
									 dataProvider = "{importedQuestionsArray}"
									 width = "100%"
									 height = "100%"
									 dragStart = "enableQuestionDropping()"
									 dragComplete = "disableQuestionDropping()">
						</mx:TileList>
						<mx:Button label = "Hide" click = "hideImportedQuestions()" id = "button1" />
					</mx:VBox>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
		<mx:State name = "hiddenImportedQuestions" basedOn = "importedQuestions">
			<mx:RemoveChild target = "{text1}" />
			<mx:SetProperty target = "{canvas2}" name = "width" value = "81" />
			<mx:SetProperty target = "{button1}" name = "label" value = "Show Imported Questions" />
			<mx:SetProperty target = "{importedQuestionsTileList}" name = "alpha" value = "0.0" />
			<mx:SetEventHandler target = "{button1}" name = "click" handler = "showImportedQuestions()" />
			<mx:SetStyle target = "{vbox1}" name = "verticalAlign" value = "top" />
			<mx:SetProperty target = "{importedQuestionsTileList}" name = "height" value = "6" />
			<mx:SetProperty target = "{canvas2}" name = "height" value = "13" />
			<mx:SetStyle target = "{hbox1}" name = "verticalAlign" value = "bottom" />
			<mx:RemoveChild target = "{button1}" />
			<mx:AddChild relativeTo = "{canvas1}" position = "lastChild" target = "{button1}" />
			<mx:SetStyle target = "{button1}" name = "right" value = "10" />
			<mx:SetStyle target = "{button1}" name = "bottom" value = "10" />
			<mx:RemoveChild target = "{canvas2}" />
			<mx:AddChild relativeTo = "{canvas1}" position = "lastChild" target = "{canvas2}" />
			<mx:SetStyle target = "{canvas2}" name = "right" value = "12" />
			<mx:SetStyle target = "{canvas2}" name = "bottom" value = "-300" />
			<mx:SetProperty target = "{canvas1}" name = "horizontalScrollPolicy" value = "off" />
			<mx:SetProperty target = "{canvas1}" name = "verticalScrollPolicy" value = "off" />
			<mx:SetProperty name = "verticalScrollPolicy" value = "off" />
			<mx:SetProperty name = "horizontalScrollPolicy" value = "off" />
		</mx:State>
		<mx:State name = "newGameHelp">
			<mx:AddChild relativeTo = "{canvas1}" position = "lastChild">
				<mx:Canvas backgroundColor = "#11202C"
						   left = "0"
						   bottom = "0"
						   right = "0"
						   backgroundAlpha = "0"
						   id = "canvas6" top="0" mouseEnabled="false">
					<mx:SWFLoader width = "230"
								  height = "280"
								  id = "enigmaHelpArrow"
								  left="362" top="214"/>
					<mx:Canvas height = "117"
							   cornerRadius = "8"
							   borderStyle = "solid"
							   borderThickness = "2"
							   borderColor = "#FFFFFF"
							   backgroundColor = "#5C7B9C"
							   id = "canvas5" top="430" left="175" width="321">
						<mx:Text
								 left = "10"
								 top = "10"
								 bottom = "10"
								 right = "10"
								 styleName = "E2EditQuestionPanelTitle"
								 selectable = "false"
								 id = "text2"  text="To get started, create a new category by clicking on the Add Category row..."/>
					</mx:Canvas>
					<mx:Button id = "addCategoryButtonHelper"
							   label = "Add Category"
							   click = "addCategory()"
							   styleName = "gameButton"
							   buttonMode = "true"
							   fontWeight = "normal"
							   cornerRadius = "8"
							   right = "20"
							   top = "14"  visible="false"/>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
		<mx:State name = "categoriesAndQuestions" basedOn = "newGameHelp">
			<mx:SetProperty target = "{text2}" name = "text">
				<mx:value>Each category can have a maximum of six questions. You add questions by clicking on the plus (+) button.</mx:value>
			</mx:SetProperty>
			<mx:SetProperty target = "{canvas5}" name = "width"/>
			<mx:SetStyle target = "{canvas5}" name = "right" value="10"/>
			<mx:RemoveChild target = "{enigmaHelpArrow}" />
			<mx:SetStyle target = "{canvas5}" name = "bottom" value="10"/>
			<mx:SetStyle target = "{canvas5}" name = "top"  value="10"/>
			<mx:RemoveChild target = "{addCategoryButtonHelper}" />
			<mx:SetStyle target = "{canvas6}" name = "backgroundAlpha" value = "0.0" />
			<mx:SetStyle target = "{canvas6}" name = "top" />
			<mx:SetProperty target = "{canvas6}" name = "height" value="140"/>
			<mx:SetProperty target = "{canvas5}" name = "height"/>
			<mx:SetStyle target="{canvas5}" name="left" value="10"/>
			<mx:SetStyle target="{canvas6}" name="left" value="481"/>
		</mx:State>
		<mx:State name = "draggingQuestions" basedOn = "categoriesAndQuestions">
			<mx:SetProperty target = "{text2}" name = "text">
				<mx:value>After you have added questions, you can drag-and-drop them to reposition their order. You can also drag them to other categories. Double-click questions to edit. To remove questions, drag them to the trashcan on the left.</mx:value>
			</mx:SetProperty>
			<mx:SetProperty target = "{canvas6}" name = "height" value = "223" />
			<mx:SetProperty target = "{canvas5}" name = "height" value = "162" />
		</mx:State>
	</materia:states>
	<mx:Style source = "assets/E2style.css" />
	<mx:Canvas width = "100%" height = "100%" id = "canvas1">
		<mx:Canvas height = "60"
				   backgroundColor = "#11202C"
				   left = "0"
				   top = "0"
				   right = "0"
				   verticalScrollPolicy = "off"
				   horizontalScrollPolicy = "off"
				   id = "canvas4">
			<mx:SWFLoader id = "enigmaTitleBackground"
						  width = "100%"
						  height = "100%"
						  maintainAspectRatio = "false"
						  left = "0"
						  right = "0" />
			<mx:Canvas height = "100%"
					   left = "10"
					   right = "10"
					   top = "0"
					   verticalScrollPolicy = "off"
					   horizontalScrollPolicy = "off">
				<mx:HBox height = "40"
						 verticalCenter = "0"
						 left = "10"
						 right = "300"
						 horizontalGap = "0">
					<mx:Canvas width = "130" height = "100%">
						<mx:Label text = "Widget Name:" width = "130" verticalCenter = "0" styleName = "textFeildLabel" />
					</mx:Canvas>
					<mx:Canvas width = "100%" height = "100%">
						<mx:TextInput width = "100%"
									  focusIn="focusOnText(event)"
									  text="{instanceTitle}"
									  maxChars="{CreatorConfig.MAX_TITLE_LENGTH}"
									  change="{instanceTitle=enigmaTitleName.text;}"
									  textAlign = "left"
									  id = "enigmaTitleName"
									  styleName = "E2EditQuestionPanelTitle"
									  backgroundAlpha = "0.0"
									  cornerRadius = "0"
									  verticalCenter = "0"
									  left = "0"
									  borderStyle = "none" />
					</mx:Canvas>
				</mx:HBox>
				<mx:HBox height="40" verticalCenter="0" right="20" verticalAlign="middle">
					<mx:Label text="Randomize Answer Order:" verticalCenter = "0" styleName = "textFeildLabel" />
					<mx:CheckBox id="randomize"/>
				</mx:HBox>
			</mx:Canvas>
		</mx:Canvas>
		<mx:SWFLoader id = "enigmaBackground"
					  top = "62"
					  bottom = "0"
					  maintainAspectRatio = "false"
					  left = "0"
					  right = "0" />
		<mx:Box height = "20"
				top = "60"
				right = "0"
				left = "0"
				backgroundColor = "#5D656A"
				id = "box1">
			<mx:filters>
				<mx:DropShadowFilter alpha = ".3"
									 angle = "45"
									 distance = "4"
									 blurX = "4"
									 blurY = "4"
									 strength = "1" />
			</mx:filters>
		</mx:Box>
		<mx:HBox top = "88"
				 bottom = "10"
				 left = "10"
				 right = "10"
				 id = "hbox1">
			<mx:List width = "100%"
					 height = "100%"
					 id = "catList"
					 selectionColor = "#162737"
					 backgroundAlpha = "0"
					 scroll = "updateNoDragFunction()"
					 dragStart = "dragCategoryStartHandler(event)"
					 dragDrop = "{dragCategoryDropHandler(event)}"
					 dragEnter = "dragCategoryEnterHandler(event)"
					 useRollOver = "false"
					 dragComplete = "{catListDragComplete()}"
					 dragEnabled = "true"
					 dropEnabled = "true"
					 dragMoveEnabled = "true"
					 borderThickness = "0"
					 alpha = "1"
					 itemRenderer = "EnigmaCategory"
					 dataProvider = "{qSet.items}"
					 dropShadowEnabled = "false"
					 dropIndicatorSkin = "@Embed(source='/assets/dropIndicator.swf')">
			</mx:List>
		</mx:HBox>
	</mx:Canvas>
	<mx:Script>
		<![CDATA[
			import materia.CreatorConfig;
			import com.adobe.crypto.MD5;
			import materia.questionStorage.Question;
			import materia.questionStorage.QuestionGroup;
			import materia.questionStorage.QuestionSet;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ArrayUtil;
			public static const EMPTY:String = "[Empty]";
			protected static const TRACE_STRING:String = "Enigma2KogneatoCreator.mxml";
			[Bindable]
			private var largeTrash:Object = new FL_Symbol_Trash();
			[Bindable]
			private var answerArrayCollection:ArrayCollection;
			private var enigmaHelpArrowGraphic:Enigma2HelpArrow = new Enigma2HelpArrow();
			private var enigmaLogoGraphic:enigmaLogoMC = new enigmaLogoMC();
			private var enigmaBackgroundGraphic:Enigma2BackgroundMC = new Enigma2BackgroundMC();
			private var enigmaTitleBackgroundGraphic:Enigma2TitleBackgroundMC =
				new Enigma2TitleBackgroundMC();
			[Bindable]
			private var importedQuestionsArray:ArrayCollection;
			private var currentSelectedCategory:Number;
			private var currentSelectedQuestion:Number;
			private var currentDraggingQuestion:Number;
			private var helpInformedAboutDragging:Boolean;
			private var addQuestionHelpIsOpen:Boolean;
			private var numberOfImportedQuestions:Number;
			private var tempKidsArray:Array;
			private static const MAX_QUESTIONS:Number = 6;
			private var draggingCategory:Boolean;
			[Bindable]
			private var qSet:QuestionSet;
			[Bindable]
			private var catListProvider:Array;
			[Bindable]
			private var trashCollection:ArrayCollection;
			private var letterArray:Array;
			protected var _showingImportedQuestionPanel:Boolean = false;
			protected var _lastPopup:EditQuestionPopup;
			public override function init():void
			{
				draggingCategory = false;
				instanceTitle = "Unnamed Enigma Game";
				enigmaBackground.source = Enigma2BackgroundMC;
				enigmaTitleBackground.source = Enigma2TitleBackgroundMC;
				numberOfImportedQuestions = 0;
				answerArrayCollection = new ArrayCollection();
				letterArray =
					new Array("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
							  "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z");
				importedQuestionsArray = new ArrayCollection();
				qSet = new QuestionSet();
				//create a game with 3 categorie
				helpInformedAboutDragging = false;
				addQuestionHelpIsOpen = false;
				tempKidsArray = new Array();
				addEventListener(EnigmaEvents.QUESTION_DRAG, draggingQuestion, false, 0, true);
				addEventListener(EnigmaEvents.QUESTION_DRAG_COMPLETE, draggingQuestionComplete, false, 0, true);
				addEventListener(EnigmaEvents.CATEGORY_QUESTION_HIT, questionHit, false, 0, true);
				addEventListener(EnigmaEvents.CATEGORY_QUESTION_MOUSE_DOWN, newDragQuestion, false, 0, true);
				addEventListener(EnigmaEvents.ADD_QUESTION, addNewQuestionToCategory, false, 0, true);
				addEventListener(EnigmaEvents.DELETE_ANSWER_CLICKED, deleteAnswerFromList, false, 0, true);
				addEventListener(EnigmaEvents.DELETE_CATEGORY_CLICKED, deleteCategory, false, 0, true);
				addEventListener(EnigmaEvents.DELETE_QUESTION_CLICKED, importedQuestionDeleteClicked, false, 0, true);
				addEventListener(EnigmaEvents.DELETE_QUESTION_IN_CATEGORY, deleteQuestionInCategory, false, 0, true);
				addEventListener(EnigmaEvents.FOCUS_OUT_ANSWER, enableDraggingAnswers, false, 0, true);
				addEventListener(EnigmaEvents.FOCUS_ON_ANSWER, disableDraggingAnswers, false, 0, true);
				addEventListener(EnigmaEvents.FOCUS_OUT_CATEGORY_NAME, enableDraggingCategories, false, 0, true);
				addEventListener(EnigmaEvents.FOCUS_ON_CATEGORY_NAME, disableDraggingCategories, false, 0, true);
				catList.addEventListener(EnigmaCategory.EVENT_NEW_CATEGORY, onAddNewCategoryByRow, false, 0, true)
				catList.dataProvider.refresh();
				catList.invalidateList();
				catListProvider = qSet.items;
				super.init();
			}
			public override function initNewWidget(widget:Object, baseUrl:String):void
			{
				super.initNewWidget(widget, baseUrl);
				currentState = 'newGameHelp';
				enigmaHelpArrow.source = Enigma2HelpArrow;
				addPlaceholder();
			}
			protected override function initExistingWidget(title:String, widget:Object, qset:Object, version:String, baseUrl:String):void
			{
				super.initExistingWidget(title, widget, qset, version, baseUrl);
				if (questionSet != null)
				{
					// transfer everything from incoming qset into our qset
					qSet.options = questionSet.options;
					if(qSet.options.randomize)
					{
						randomize.selected = qSet.options.randomize;
					}
					if(questionSet.items.length == 0)
					{
						initNewWidget(widget, baseUrl);
						return;
					}
					for (var catIndex:Number = 0; catIndex < questionSet.items.length; catIndex++)
					{
						var catIN:Object = questionSet.items[catIndex];
						addCategory(catIN.name, false);
						var catTO:Object = qSet.items[catIndex]
						catTO.options["cid"] = catIndex;
						for (var qIndex:Number = 0; qIndex < catIN.items.length; qIndex++)
						{
							var qIN:Object = catIN.items[qIndex]
							addQuestion(catIndex, "");
							var qTO:Object = catTO.items[qIndex]
							// add a question in case it is undefined to prevent errors
							if (catTO.items[qIndex] == undefined)
							{
								catTO.items[qIndex] = new Question();
							}
							qTO.questions = qIN.questions;
							qTO.answers = qIN.answers;
							qTO.id = qIN.id;
							qTO.options["index"] = qIndex + 1;
							if(qTO.answers != null)
							{
								for (var aIndex:Number = 0; aIndex < qTO.answers.length; aIndex++)
								{
									qTO.answers[aIndex].options["letter"] = letterArray[aIndex];
									qTO.answers[aIndex].id = qIN.answers[aIndex].id;
									if (qTO.answers[aIndex].value == null)
									{
										qTO.answers[aIndex]["value"] = "0";
									}
								}
							}
							else
							{
								qTO.answers = [];
							}
						}
					}
				}
			}
			private function showImportedQuestions():void
			{
				_showingImportedQuestionPanel = true;
				if (importedQuestionsArray.source.length > 0)
				{
					currentState = 'importedQuestions';
				}
				else
				{
					currentState = '';
				}
			}
			private function hideImportedQuestions():void
			{
				_showingImportedQuestionPanel = false;
				if (importedQuestionsArray.source.length > 0)
				{
					currentState = 'hiddenImportedQuestions';
				}
				else
				{
					currentState = '';
				}
			}

			private function checkForErrors():Boolean
			{
				return false;
			}

			public override function onSaveClicked(mode:String = 'save'):void
			{
				removePlaceholder();
				qSet.options.randomize = randomize.selected;
				//clone current qset
				var temp:QuestionGroup = qSet.clone();
				addPlaceholder();

				ExternalInterface.call("__materia_flash_save", instanceTitle, temp.convertToObject(), questionSetVersion);
				// or cancel it:
				// ExternalInterface.call("__materia_flash_cancelSave", 'Save Canceled');
			}
			private function newDragQuestion(event:EnigmaEvents):void
			{
				currentDraggingQuestion = event.data.question;
			}
			private function disableDraggingCategories(event:EnigmaEvents):void
			{
				catList.dragEnabled = false;
			}
			private function enableDraggingCategories(event:EnigmaEvents):void
			{
				catList.dragEnabled = true;
			}
			private function disableDraggingAnswers(event:EnigmaEvents):void
			{
				answersDataGrid.dragEnabled = false;
			}
			private function enableDraggingAnswers(event:EnigmaEvents):void
			{
				answersDataGrid.dragEnabled = true;
			}
			private function changeSelectedQuestion():void
			{
				//updateQuestionText();
				currentSelectedQuestion = questionTileList.selectedIndex;
				loadNewQuestion();
			}
			private function showMeData():void
			{
				Alert.show("" + qSet.items[currentSelectedCategory].items[currentSelectedQuestion].questions[0].text + "\n" + currentSelectedCategory + "\n" + currentSelectedQuestion);
			}
			private function updateQuestionText():void
			{
				qSet.items[currentSelectedCategory].items[currentSelectedQuestion].questions[0].text =	questionText.text;
				questionTileList.dataProvider.refresh();
				questionTileList.invalidateList();
			}
			private function loadNewQuestion():void
			{
				questionText.text =
					qSet.items[currentSelectedCategory].items[currentSelectedQuestion].questions[0].text;
				editingQuestionPanel.title = "Editing Question " + Number(currentSelectedQuestion + 1) + " of " + qSet.items[currentSelectedCategory].name + ":";
				if (qSet.items[currentSelectedCategory].items[currentSelectedQuestion].answers != null)
				{
					answerArrayCollection.source = qSet.items[currentSelectedCategory].items[currentSelectedQuestion].answers;
				}
			}
			private function loadEditingQuestionTileList():void
			{
				questionTileList.dataProvider = qSet.items[currentSelectedCategory].items;
				questionTileList.selectedIndex = currentSelectedQuestion - 1;
			}
			private function loadAnswers():void
			{
				answerArrayCollection = new ArrayCollection();
			}
			private function addAnswer():void
			{
				if (answerArrayCollection.source.length != 26)
				{
					answerArrayCollection.source.push({ id: 0, text: "[Click to edit]", value: 0,
							options: { feedback: "",
							letter: letterArray[answerArrayCollection.source.length] } });
					answersDataGrid.dataProvider.refresh();
					answersDataGrid.invalidateList();
				}
			}
			public function reOrderLetters():void
			{
				callLater(reOrderTheLetters);
			}
			private function reOrderTheLetters():void
			{
				for (var i:Number = 0; i < answerArrayCollection.source.length; i++)
				{
					answerArrayCollection.source[i].options.letter = letterArray[i];
				}
				answersDataGrid.invalidateList();
			}
			private function addNewQuestionToCategory(event:EnigmaEvents):void
			{
				if (helpInformedAboutDragging == false)
				{
					helpInformedAboutDragging = true;
					addQuestionHelper();
				}
				var newQuestionIndex:int = event.data.cid;
				// HACK CODE START
				// event.data.cid is wrong after dragging categories
				// im just going to hack fix it here
				//  or maybe is this a better way to do it that data.cid?
				for (var i:int = 0; i < catList.dataProvider.length; i++)
				{
					if (catList.indexToItemRenderer(i) == event.target)
					{
						newQuestionIndex = i;
						break;
					}
				}
				// HACK CODE END
				addQuestion(newQuestionIndex);
				//open edit popup for new question
				var cat:EnigmaCategory = EnigmaCategory(event.target);
				EnigmaQuestion(cat.questionTileList.indexToItemRenderer(cat.questionTileList.dataProvider.length - 1)).clicked();
			}
			private function questionHit(event:EnigmaEvents):void
			{
				var question:Question = qSet.items[event.data.cid].items[event.data.question - 1]
				if (_lastPopup != null)
				{
					_lastPopup.terminate();
					_lastPopup = null;
				}
				var spacing:int = 0;
				var popup:EditQuestionPopup = new EditQuestionPopup();
				popup.setContents(question, onCloseEditPopup);
				//find coordinates for target question box
				var point:Point =
					this.globalToLocal(event.data.item.localToGlobal(new Point(12, 0)));
				//set x orientation of popup
				var middleX:Number = point.x + event.data.item.width / 2;
				if(middleX < width / 2) //left secton
				{
					popup.x = point.x + event.data.item.width + spacing;
					popup.setArrowOrientation(EditQuestionPopup.LEFT);
				}
				else //right section
				{
					popup.x = point.x - popup.width - spacing;
					popup.setArrowOrientation(EditQuestionPopup.RIGHT);
				}
				//set y orientation of popup
				var middleY:Number = point.y + event.data.item.height / 2;
				if(middleY < height / 3) //top secton
				{
					popup.y = point.y;
					popup.setArrowOrientation(EditQuestionPopup.TOP);
				}
				else if(middleY < 2 * height / 3) //middle section
				{
					popup.y = point.y + event.data.item.height / 2 - popup.height / 2;
					popup.setArrowOrientation(EditQuestionPopup.MIDDLE);
				}
				else //bottom section
				{
					popup.y = point.y + event.data.item.height - popup.height;
					popup.setArrowOrientation(EditQuestionPopup.BOTTOM);
				}
				_lastPopup = popup
				PopUpManager.addPopUp(popup, this, false);
				currentSelectedQuestion = event.data.question - 1;
				highlightQuestionBox(event.data.cid, currentSelectedQuestion);
			}
			private function onCloseEditPopup():void
			{
				//Reset luminance of all question boxes
				highlightQuestionBox(-1);
			}
			/**
			 * Highlights question box at given category and index and dims the others.
			 * If category given == -1, luminance setting of all boxes is reset
			 */
			private function highlightQuestionBox(targetCategory:int, targetIndex:int = 0):void
			{
				var i:int, j:int;
				//cycle througha all cateogories
				for(i = 0; i < catListProvider.length-1; i++)
				{
					var currentCategory:EnigmaCategory = EnigmaCategory(catList.indexToItemRenderer(i));
					//to avoid crashing in situations where item renderer was not yet created
					if(currentCategory == null)
					{
						continue;
					}
					currentCategory.questionTileList.dataProvider.refresh();
					//cycle through all questions in category
					for(j = 0; j < currentCategory.questionTileList.dataProvider.length; j++)
					{
						var targetQuestion:EnigmaQuestion = EnigmaQuestion(currentCategory.questionTileList.indexToItemRenderer(j));
						//to avoid crashing in situations where item renderer was not yet created
						if(targetQuestion == null)
						{
							return;
						}
						if(targetCategory == -1)
						{
							targetQuestion.luminance = EnigmaQuestion.LUMINANCE_NORMAL;
						}
						else if(targetCategory == i && targetIndex == j)
						{
							targetQuestion.luminance = EnigmaQuestion.LUMINANCE_BRIGHT;
						}
						else
						{
							targetQuestion.luminance = EnigmaQuestion.LUMINANCE_DIM;
						}
					}
				}
			}
			//TODO: Remove this function
			private function closeEditWindow():void
			{
				if (importedQuestionsArray.source.length > 0)
				{
					currentState = 'hiddenImportedQuestions';
				}
				else
				{
					currentState = '';
				}
				qSet.items[currentSelectedCategory].items[currentSelectedQuestion].answers =	answerArrayCollection.source;
				var currentPosition:Number = catList.verticalScrollPosition;
				if (catList.dataProvider != null)
				{
					catList.dataProvider.refresh();
				}
				catList.invalidateList();
			}
			//TODO: Remove this function
			private function closeEditWindowNoSave():void
			{
				if (importedQuestionsArray.source.length > 0)
				{
					currentState = 'hiddenImportedQuestions';
				}
				else
				{
					currentState = '';
				}
			}
			private function openEditWindow(category:Number, question:Number):void
			{
				currentState = 'editingQuestion';
				tempKidsArray = new Array();
				tempKidsArray = ArrayUtil.toArray(qSet.items[category].items);
				currentSelectedCategory = category;
				currentSelectedQuestion = question;
				editingQuestionPanel.title = "Editing Question " + question + " of " + qSet.items[category].name + ":";
				questionText.text = qSet.items[category].items[question - 1].questions[0].text;
				loadEditingQuestionTileList();
				if (qSet.items[category].items[question - 1].answers != null)
				{
					answerArrayCollection.source = qSet.items[category].items[question - 1].answers;
				}
				reOrderLetters();
			}
			private function deleteTrash():void
			{
				trashCollection = new ArrayCollection();
			}
			private function dragCategoryEnterHandler(event:DragEvent):void
			{
				if (draggingCategory != true)
				{
					event.preventDefault();
				}
			}
			public function reOrderQuestions():void
			{
				callLater(reOrderTheQuestions);
			}
			public function reOrderTheQuestions():void
			{
				var selectWhichQuestion:Number = -1;
				for (var i:Number = 0; i < qSet.items[currentSelectedCategory].items.length; i++)
				{
					if (currentDraggingQuestion == qSet.items[currentSelectedCategory].items[i].options.index)
					{
						qSet.items[currentSelectedCategory].items[i].options.index = i + 1;
						selectWhichQuestion = i;
					}
					else
					{
						qSet.items[currentSelectedCategory].items[i].options.index = i + 1;
					}
				}
				questionTileList.dataProvider.refresh();
				questionTileList.invalidateList();
				questionTileList.selectedIndex = selectWhichQuestion;
				currentSelectedQuestion = selectWhichQuestion;
				loadNewQuestion();
			}
			private function disableQuestionDropping():void
			{
				for (var i:Number = 0; i < qSet.items.length; i++)
				{
					if (catList.indexToItemRenderer(i) != null)
					{
						catList.indexToItemRenderer(i)["disableDrag"]();
					}
				}
			}
			private function enableQuestionDropping():void
			{
				for (var i:Number = 0; i < qSet.items.length; i++)
				{
					if (catList.indexToItemRenderer(i) != null)
					{
						if (qSet.items[i].items.length >= MAX_QUESTIONS)
						{
							catList.indexToItemRenderer(i)["disableDrag"]();
						}
						else
						{
							catList.indexToItemRenderer(i)["enableDrag"]();
						}
					}
				}
			}
			private function updateNoDragFunction():void
			{
				disableQuestionDropping();
			}
			private function dragCategoryStartHandler(event:DragEvent):void
			{
				draggingCategory = true;
				disableQuestionDropping();
			}
			private function dragCategoryDropHandler(event:DragEvent):void
			{
				callLater(delayedDragCategoryDropHandler, [event]);
			}
			private function delayedDragCategoryDropHandler(event:DragEvent):void
			{
				var dp:Object = catList.dataProvider;
				if(catList.calculateDropIndex(event) > dp.length - 1 && dp.length > 1)
				{
					var temp:Object = dp[dp.length - 1];
					dp[dp.length - 1] = dp[dp.length - 2];
					dp[dp.length - 2] = temp;
				}
				draggingCategory = false;
				enableQuestionDropping();
			}
			private function showQuestionHelp(event:TimerEvent = null):void
			{
				currentState = 'categoriesAndQuestions';
				var waitTimer:Timer = new Timer(4100, 5);
				waitTimer.addEventListener(TimerEvent.TIMER_COMPLETE, hideQuestionHelp);
				waitTimer.start();
			}
			private function closeAddQuestionHelp(event:TimerEvent = null):void
			{
				addQuestionHelpIsOpen = false;
				hideQuestionHelp();
			}
			private function hideQuestionHelp(event:TimerEvent = null):void
			{
				if (addQuestionHelpIsOpen == false && currentState != "editingQuestion")
				{
					tryShowingImportedQuestions();
				}
			}
			protected function tryShowingImportedQuestions():void
			{
				if (_showingImportedQuestionPanel)
				{
					showImportedQuestions();
				}
				else
				{
					hideImportedQuestions();
				}
			}
			private function addPlaceholder():void
			{
				qSet.addChild(new QuestionGroup('placeholder', {type:'placeholder'}));
				catList.dataProvider.refresh();
				catList.invalidateList();
			}
			private function removePlaceholder():void
			{
				// search for any and all placeholders and remove them
				for(var i:int = 0; i < qSet.items.length; i++)
				{
					var cat:QuestionGroup = qSet.items[i] as QuestionGroup
					if(cat.options.hasOwnProperty('type') && cat.options.type == 'placeholder')
					{
						qSet.removeItemAt(i)
					}
				}
			}
			private function addCategory(categoryName:String = null, addFirstQuestion:Boolean = true):void
			{
				removePlaceholder()
				// show the question help when creating the first category
				if (currentState == "newGameHelp")
				{
					currentState = "";
					showQuestionHelp();
				}
				// set default name
				if (categoryName == null || categoryName == '')
				{
					categoryName = "New Category"
				}
				qSet.addChild(new QuestionGroup(categoryName, { cid: qSet.items.length }));
				//Given that the irritating 'add question' help dialog stays up until
				//the user adds a question themselves, this seems pretty unnecessary.
				// add first question if needed
				//if (addFirstQuestion == true)
				//{
				//	addQuestion(qSet.items.length - 1);
				//}
				// put the placeholder back at the end
				addPlaceholder();
				catList.dataProvider.refresh();
				catList.invalidateList();
			}
			private function draggingQuestion(event:EnigmaEvents):void
			{
				catList.dropEnabled = false;
				enableQuestionDropping();
			}
			private function draggingQuestionComplete(event:EnigmaEvents):void
			{
				var currentPosition:Number = catList.verticalScrollPosition;
				catList.dropEnabled = true;
				for (var i:Number = 0; i < qSet.items.length; i++)
				{
					if (catList.indexToItemRenderer(i) != null)
					{
						catList.indexToItemRenderer(i)["reOrderQuestions"]();
					}
				}
				catList.dataProvider.refresh();
				catList.verticalScrollPosition = currentPosition;
				catList.invalidateList();
			}
			public override function addImportedQuestion(question:Question):Question
			{
				//trace(TRACE_STRING + "::addImportedQuestion");
				var q:Question = super.addImportedQuestion(question);
				q.type = "MC";
				q.addOption("index", "?");
				importedQuestionsArray.source.push(q);
				importedQuestionsArray.refresh();
				catList.dataProvider.refresh();
				catList.invalidateList();
				// NOTE: i think this has to happen after the other stuff
				showImportedQuestions();
				return q;
			}
			private function showObject():void
			{
				// TODO: this was commented out in materia upgrade
//				TestingUtils.debugScrollWindow(testing.ObjectTracer.obj(qSet), this);
			}
			private function addQuestionHelper():void
			{
				currentState = "draggingQuestions";
				var waitTimer:Timer = new Timer(1100, 5);
				addQuestionHelpIsOpen = true;
				waitTimer.addEventListener(TimerEvent.TIMER_COMPLETE, closeAddQuestionHelp);
				waitTimer.start();
			}
			private function addQuestion(category:Number, questionText:String = null):void
			{
				var currentPosition:Number = catList.verticalScrollPosition;
				var cat:QuestionGroup = qSet.items[category] as QuestionGroup
				if (!(cat.items.length >= MAX_QUESTIONS))
				{
					var newQ:Question = new Question("MC", { index: cat.length + 1 }, 0)
					//newQ.questions = new Array() // This looks like its created in Question already
					cat.addQuestion(newQ);
					if (questionText != null)
					{
						newQ.questions.push({ text: questionText });
					}
					else
					{
						newQ.questions.push({ text: EMPTY });
					}
					catList.dataProvider.refresh();
					catList.validateNow();
					// only really need to do this on the first one added
					hackFixCategoryDisplay(category);
				}
				catList.verticalScrollPosition = currentPosition;
			}
			//NOTE: the category displays were not working right, so adding this to fixit
			// currently i dont want to take the time to figure out exactly whats happening, so hackfixing
			// i think the problem is with databinding and using the qset as the dataprovider like we are
			protected function hackFixCategoryDisplay(index:int):void
			{
				var cat:EnigmaCategory = catList.indexToItemRenderer(index) as EnigmaCategory;
				if (cat != null)
				{
					cat.updateData();
				}
			}

			private function focusOnText(event:*):void
			{
				event.currentTarget.setSelection(0, event.currentTarget.text.length);
			}
			private function deleteAnswerFromList(event:*):void
			{
				for (var i:Number = 0; i < answerArrayCollection.source.length; i++)
				{
					if (answerArrayCollection.source[i].options.letter == event.data.letter)
					{
						answerArrayCollection.removeItemAt(i);
					}
				}
				reOrderLetters();
			}
			private function deleteCategory(event:*):void
			{
				qSet.removeItemAt(event.data.cid);
				resetCategoryIds();
			}
			protected function resetCategoryIds():void
			{
				for (var i:Number = 0; i < qSet.items.length; i++)
				{
					qSet.items[i].options["cid"] = i;
				}
				catList.invalidateDisplayList();
				catList.invalidateList();
			}
			protected function catListDragComplete():void
			{
				resetCategoryIds();
			}
			private function deleteQuestionInCategory(event:*):void
			{
				if(_lastPopup != null && _lastPopup.question == qSet.items[event.data.cid].items[event.data.qid - 1])
				{
					_lastPopup.terminate();
				}
				// NOTE: this looks wrong, remove item at qid?
				qSet.items[event.data.cid].removeItemAt(event.data.qid - 1);
				for (var i:Number = 0; i < qSet.items[event.data.cid].length; i++)
				{
					qSet.items[event.data.cid].items[i].options["index"] = i + 1;
				}
			}
			protected function importedQuestionDeleteClicked(e:*):void
			{
				var theData:* = e.data.data;
				for (var i:int = 0; i < importedQuestionsArray.source.length; i++)
				{
					if (importedQuestionsArray.source[i] == theData)
					{
						importedQuestionsArray.source.splice(i, 1);
						importedQuestionsArray.refresh();
						break;
					}
				}
			}
			private function onAddNewCategoryByRow(e:Event):void
			{
				addCategory();
				e.stopPropagation();
			}
		]]>
	</mx:Script>
</materia:CreatorBase>