<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="700" height="110" creationComplete="init()">
	<mx:states>
		<mx:State name="Placeholder">
			<mx:SetEventHandler name="click" handler="{onPlaceholderFocus()}"/>
			<mx:RemoveChild target="{questionTileList}"/>
			<mx:RemoveChild target="{textarea1}"/>
			<mx:RemoveChild target="{canvas1}"/>
			<mx:RemoveChild target="{canvas2}"/>
			<mx:RemoveChild target="{canvas3}"/>
			<mx:RemoveChild target="{hbox1}"/>
			<mx:AddChild position="lastChild">
				<mx:Label text="Click Here To Add Another Category" horizontalCenter="0" verticalCenter="0" styleName="gameTitleText" textAlign="center"/>
			</mx:AddChild>
			<mx:SetStyle name="borderStyle" value="solid"/>
			<mx:SetStyle name="borderThickness" value="1"/>
			<mx:SetStyle name="borderColor" value="0xf0f0f0"/>
		</mx:State>
	</mx:states>
	<mx:HBox width="100%" height="100%" y="0" x="0" id="hbox1">
		<mx:Canvas height="100%" id="canvas1">
				<mx:Canvas id="deleteButton" buttonMode="true" styleName="deleteAnswerButton" toolTip="Delete Category" mouseOver="deleteButton.styleName='deleteAnswerButtonHover'" mouseOut="deleteButton.styleName='deleteAnswerButton'" click="deleteCategory();" useHandCursor="true" height="20" width="20" verticalCenter="0"></mx:Canvas>
		</mx:Canvas>
		<mx:Canvas height="100%" id="canvas3">
			<mx:Canvas width="130" height="65" cornerRadius="0" alpha="1.0" verticalCenter="0" styleName="enigmaCategory">
				<mx:TextArea  focusIn="dontDrag()"
					focusOut="doDrag()"
					click="focusOnText(event)"
					change="updateTitle(event)"
					text="{dataName}"
					fontWeight="bold" fontSize="14"
					left="5"
					right="12"
					maxChars="23" height="51" verticalCenter="-1" borderStyle="none" textAlign="center" id="textarea1"/>
			</mx:Canvas>
		</mx:Canvas>
		<mx:TileList
			id="questionTileList"
			dataProvider="{dataKids}"
			width="100%" height="110"
			backgroundColor="#FFFFFF"
			itemRenderer="EnigmaQuestion"
			dragStart="dragQuestionStartHandler(event)"
			dragDrop="dragQuestionDropHandler(event)"
			dragComplete="{dragQuestionDropHandler(event)}"
			dragEnter="dragQuestionEnterHandler(event)"
			dragEnabled="true" dropEnabled="true" dragMoveEnabled="true"
			change="updateData()"
			backgroundAlpha="0"
		 	borderThickness="0"
			dropIndicatorSkin="@Embed(source='/assets/dropIndicator.swf')">
		</mx:TileList>
	</mx:HBox>
	<mx:Canvas height="100%" verticalCenter="0" id="canvas2">
		<mx:Canvas id="addQuestionButton" left="0" useHandCursor="true" styleName="addQuestionPlus" mouseOut="addQuestionButtonMouseOut();" mouseOver="addQuestionButtonMouseOver();"
			click="addQuestionToCategory()" buttonMode="true" width="36" height="36" verticalCenter="0">
		</mx:Canvas>
	</mx:Canvas>
	<!--dropEnabled="{data.options.enableDropping}"-->
<mx:Script>
	<![CDATA[
		import mx.controls.List;
		import mx.collections.ArrayCollection;
		import mx.events.DragEvent;
		import mx.controls.Alert;
		import mx.managers.DragManager;
		public static const EVENT_NEW_CATEGORY:String = "newCategory";
		private static const MAX_QUESTIONS:Number = 6;
		[Bindable]
		protected var dataName:String = "";
		[Bindable]
		protected var dataKids:ArrayCollection = new ArrayCollection();
		protected static const TRACE_STRING:String = "EnigmaCategory.mxml";
		public override function set data(value:Object):void
		{
			super.data = value;
			if(data != null && questionTileList != null)
			{
				dataName = data.name;
				dataKids.source =  data.items;
				relocateAddQuestionButton();
			}
			if(data != null && data.options != null && data.options.type != null && data.options.type == 'placeholder')
			{
				currentState = 'Placeholder';	//Use "click to add" state
			}
			else
			{
				currentState = ''
			}
		}
		public var draggingQuestion:Boolean;
		private function init():void
		{
			draggingQuestion = false;
			addEventListener(EnigmaEvents.QUESTION_HIT, questionHit);
			addEventListener(EnigmaEvents.DELETE_QUESTION_CLICKED, deleteQuestion);
		}
		private function questionHit(event:EnigmaEvents):void {
			dispatchEvent(new EnigmaEvents(EnigmaEvents.CATEGORY_QUESTION_HIT, {question: event.data.question, item: event.data.item, cid: data.options.cid}, true));
		}
		// NOTE: making this public for a hack fix
		public function updateData():void
		{
			questionTileList.dataProvider.refresh();
			questionTileList.invalidateList();
		}
		private function dragQuestionEnterHandler(event:DragEvent):void
		{
		}
		private function dragQuestionStartHandler(event:DragEvent):void
		{
			dispatchEvent(new EnigmaEvents(EnigmaEvents.QUESTION_DRAG, {}, true));
			draggingQuestion = true;
			questionTileList.dropEnabled = true;
		}
		private function dragQuestionDropHandler(event:DragEvent):void
		{
			dispatchEvent(new EnigmaEvents(EnigmaEvents.QUESTION_DRAG_COMPLETE, {}, true));
			draggingQuestion = false;
			reOrderQuestions();
		}
		public function updateQuestion(index:int):void
		{
			//TODO::HERE
		}
		public function reOrderQuestions():void
		{
			callLater(reOrderTheQuestions);
		}
		public function reOrderTheQuestions():void
		{
			for (var i:Number = 0; i<data.items.length; i++)
			{
				data.items[i].options.index = i+1;
			}
			updateData();
			checkLengthSetButton();
		}
		private function updateTitle(event:*):void
		{
			data.name = event.currentTarget.text;
		}
		private function focusOnText(event:*):void
		{
			stage.focus = event.currentTarget;
			event.currentTarget.setSelection(0,event.currentTarget.text.length);
		}
		public function enableDrag():void
		{
			questionTileList.dropEnabled = true;
		}
		public function disableDrag():void
		{
			questionTileList.dropEnabled = false;
		}
		private function addQuestionToCategory():void
		{
			if(questionTileList.dataProvider.length == 6)
			{
				return;
			}
			dispatchEvent(new EnigmaEvents(EnigmaEvents.ADD_QUESTION, {cid: data.options.cid}, true));
			checkLengthSetButton();
			relocateAddQuestionButton();
		}
		private function relocateAddQuestionButton():void
		{
			if(questionTileList.dataProvider.length == 6)
			{
				addQuestionButton.visible = false;
				return;
			}
			addQuestionButton.setStyle("left",(97 + 108 * (questionTileList.dataProvider.length + 1)));
			var temp:DisplayObjectContainer = addQuestionButton.parent;
			addQuestionButton.parent.removeChild(addQuestionButton);
			temp.addChild(addQuestionButton);
			addQuestionButton.visible = true;
		}
		private function dontDrag():void
		{
			dispatchEvent(new EnigmaEvents(EnigmaEvents.FOCUS_ON_CATEGORY_NAME, {}, true));
		}
		private function doDrag():void {
			dispatchEvent(new EnigmaEvents(EnigmaEvents.FOCUS_OUT_CATEGORY_NAME, {}, true));
		}
		private function checkLengthSetButton():void {
		}
		private function onPlaceholderFocus():void
		{
			this.currentState = '';
			dispatchEvent(new Event(EVENT_NEW_CATEGORY, true));
		}
		private function deleteCategory():void {
			dispatchEvent(new EnigmaEvents(EnigmaEvents.DELETE_CATEGORY_CLICKED, {cid: data.options.cid}, true));
		}
		private function deleteQuestion(event:*):void
		{
			event.stopImmediatePropagation();
			dispatchEvent(new EnigmaEvents(EnigmaEvents.DELETE_QUESTION_IN_CATEGORY, {cid: data.options.cid, qid: event.data.question}, true));
		}
		private function addQuestionButtonMouseOver():void {
			if (addQuestionButton.styleName!="addQuestionPlusDisabled") {
				addQuestionButton.styleName='addQuestionPlusHover';
			}
		}
		private function addQuestionButtonMouseOut():void {
			if (addQuestionButton.styleName!="addQuestionPlusDisabled") {
				addQuestionButton.styleName='addQuestionPlus';
			}
		}
	]]>
</mx:Script>
</mx:Canvas>