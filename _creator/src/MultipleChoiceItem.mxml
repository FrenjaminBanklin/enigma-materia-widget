<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="40" xmlns:local="*" >
	<mx:Label id="letterField" styleName="textFeildLabel" color="#202020" text="A" left="10" width="26" verticalCenter="0"/>
	<mx:TextInput id="answerField" tabIndex="1" left="44" top="5" bottom="5" right="117" text="{text}" change="{onAnswerFieldChange()}" keyDown="{onKeyDown(event)}" focusIn="onFieldFocus();"/>
	<mx:SWFLoader source="{trashIcon}" id="button2" width="13" height="15" right="11" click="{onDeleteClick(event)}" verticalCenter="2"/>
	<mx:CheckBox right="96" id="checkbox1" change="{onCheckBoxChanged()}" verticalCenter="0"/>
	<mx:TextInput id="percentField" width="56" restrict="0-9%" fontWeight="bold" backgroundAlpha="0" borderStyle="none" text="100%" right="32" textAlign="center" rollOut="{onPercentRollOut()}" rollOver="{onPercentRollOver()}" focusIn="{onPercentFocusIn()}" focusOut="{onPercentFocusOut()}" change="{onPercentChanged()}" keyDown="{onPercentKeyDown(event)}" verticalCenter="1"/>
	<mx:states>
		<mx:State name="Placeholder">
			<mx:RemoveChild target="{answerField}"/>
			<mx:RemoveChild target="{letterField}"/>
			<mx:RemoveChild target="{button2}"/>
			<mx:RemoveChild target="{checkbox1}"/>
			<mx:RemoveChild target="{percentField}"/>
			<mx:AddChild position="lastChild" creationPolicy="{ContainerCreationPolicy.ALL}">
				<mx:Label id="placeholderLabel" text="{_placeholderText}" horizontalCenter="0" verticalCenter="0"/>
			</mx:AddChild>
			<mx:SetEventHandler name="click" handler="{onPlaceholderFocus()}"/>
		</mx:State>
		<mx:State name="Feedback">
			<mx:SetProperty name="height" value="75"/>
			<mx:SetStyle target="{answerField}" name="bottom" value="40"/>
			<mx:AddChild position="lastChild" creationPolicy="{ContainerCreationPolicy.ALL}">
				<mx:TextInput left="44" tabIndex="2" right="10" top="40" bottom="5" id="feedbackField" change="{onFeedbackChange()}" focusIn="{onFeedbackFocus()}" focusOut="{onFeedbackFocusOut()}"  backgroundColor="#FFFECB"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:SWFLoader source="{commentIcon2}" toolTip="Feedback for this answer." height="13" width="18" bottom="13" left="10"/>
			</mx:AddChild>
			<mx:SetStyle target="{letterField}" name="top"/>
			<mx:SetStyle target="{letterField}" name="verticalCenter" value="-18"/>
			<mx:SetStyle target="{button2}" name="top"/>
			<mx:SetStyle target="{button2}" name="verticalCenter" value="-17"/>
			<mx:SetStyle target="{checkbox1}" name="top"/>
			<mx:SetStyle target="{checkbox1}" name="verticalCenter" value="-18"/>
			<mx:SetStyle target="{percentField}" name="top"/>
			<mx:SetStyle target="{percentField}" name="verticalCenter" value="-18"/>
		</mx:State>
	</mx:states>
    <mx:transitions>
        <mx:Transition id="expandTransition" fromState="" toState="Feedback">
			<mx:Resize id="expandEffect" targets="{[this]}" duration="{DURATION_EXPAND}" effectEnd="{onEffectEnd(event)}"/>
        </mx:Transition>
        <mx:Transition id="contractTransition" fromState="Feedback" toState="">
			<mx:Resize id="contractEffect" targets="{[this]}" duration="{DURATION_CONTRACT}" effectEnd="{onEffectEnd(event)}"/>
        </mx:Transition>
    </mx:transitions>
	<mx:Script>
		<![CDATA[
			import mx.core.IUIComponent;
			import mx.core.FlexSprite;
			import mx.managers.IFocusManager;
			import mx.events.EffectEvent;
			import mx.states.Transition;
			// creationPolicy="{ContainerCreationPolicy.ALL}
			import mx.core.ContainerCreationPolicy;
			import nm.events.StandardEvent;
			import mx.controls.List;
			public static const EVENT_DELETED:String = "onDeleted";
			public static const EVENT_ADD_NEW:String = "addNew";
			public static const ITEM_CHECKED:String = "itemChecked";
			private static const TEXT_DEFAULT_FEEDBACK:String = "Click Here to Add Feedback For This Answer";
			private static const DURATION_EXPAND:int = 250;
			private static const DURATION_CONTRACT:int = 250;
			private static const RIGHT_PERCENT_FIELD:int = 53;
			[Bindable]
			private var trashIcon:FL_Symbol_Trash = new FL_Symbol_Trash();
			[Bindable]
			private var commentIcon:FL_Symbol_CommentBubble = new FL_Symbol_CommentBubble();
			[Bindable]
			private var commentIcon2:FL_Symbol_CommentBubble = new FL_Symbol_CommentBubble();
			[Bindable]
			public var text:String;
			[Bindable]
			private var _placeholderText:String = "Click Here To Add An Answer";
			private var _resetsSinceFocus:int = 0;
			private var _expandedRowIndex:int;
			public override function set data(value:Object):void
			{
				super.data = value;
				if(value == null)
				{
					return;
				}
				//Set Text-Field Values
				answerField.text = text = value.text;
				letterField.text = String.fromCharCode(value.rowIndex + 65);
				percentField.text = isolateNumbers(value.percent) + "%";
				if(value.feedback != null && value.feedback.length)
				{
					feedbackField.text = value.feedback;
					setFeedbackTextToGrey(false);
				}
				else
				{
					feedbackField.text = TEXT_DEFAULT_FEEDBACK;
					setFeedbackTextToGrey(true);
				}
				//Set Alternating BG colors
				if(value.rowIndex % 2 == 0)
				{
					setStyle('backgroundColor', '#FFFFFF');
				}
				else
				{
					setStyle('backgroundColor', '#EAEAEA');
				}
				onPercentChanged();
				var ddd:IFocusManager = focusManager;
				if(focusPane != null)
				{
					if(_expandedRowIndex != data.rowIndex)
					{
						contractTransition.effect = null;
						focusPane = null;
					}
				}
				else
				{
					_expandedRowIndex = -1;
				}
				//Determine Whether this is a placeholder or an answer
				setToFunctionalState();
			}
			public override function setFocus():void
			{
				if(currentState == null || currentState == 'Placeholder')
				{
					_expandedRowIndex = data.rowIndex;
					answerField.setFocus();
					answerField.setSelection(0, answerField.text.length);
					setToFunctionalState();
				}
			}
			private function isolateNumbers(text:String):String
			{
				for(var i:int = 0; i < text.length; i++)
				{
					if(text.charCodeAt(i) < 48 || text.charCodeAt(i) > 57)
					{
						text = text.substring(0,i) + text.substring(i + 1, text.length);
						i--;
					}
				}
				if(Number(text) > 100)
				{
					text = "100";
				}
				return text;
			}
			private function updateCheckBox():void
			{
				if(checkbox1.selected)
				{
					percentField.text = 100 + "%";
				}
				else
				{
					percentField.text = 0 + "%";
				}
			}
			private function highlightPercentField():void
			{
				percentField.setStyle("backgroundAlpha", 1);
				percentField.setStyle("borderStyle", "inset");
			}
			private function unHighlightPercentField():void
			{
				percentField.setStyle("backgroundAlpha", 0);
				percentField.setStyle("borderStyle", "none");
			}
			private function setToFunctionalState():void
			{
				var len:int = List(parent.parent).dataProvider.length;
				if(data.rowIndex == len - 1)
				{
					//Use "click to add" state
					if(currentState != 'Placeholder')
					{
						currentState = 'Placeholder';
					}
				}
				else if(this.focusPane != null || (data.feedback != null && data.feedback.length > 0))
				{
					if(currentState != 'Feedback')
					{
						currentState = 'Feedback';
					}
				}
				else
				{
					if(currentState != null)
					{
						currentState = null;
					}
				}
			}
			private function setFeedbackTextToGrey(setToGrey:Boolean = true):void
			{
				if(setToGrey)
				{
					feedbackField.setStyle("color", "#808080");
				}
				else
				{
					feedbackField.setStyle("color", answerField.getStyle("color"));
				}
			}
			private function onFieldFocus():void
			{
				_expandedRowIndex = data.rowIndex;
				contractTransition.effect = contractEffect;
				expandTransition.effect = expandEffect;
				trace("reset them");
			}
			private function onDeleteClick(e:Event):void
			{
				dispatchEvent(new DataEvent(EVENT_DELETED, true, false, String(data.rowIndex)));
			}
			private function onFeedbackFocus():void
			{
				if(feedbackField.text == TEXT_DEFAULT_FEEDBACK)
				{
					feedbackField.text = "";
					feedbackField.setSelection(0, 0);
					setFeedbackTextToGrey(false);
				}
				onFieldFocus();
			}
			private function onFeedbackFocusOut():void
			{
				if(feedbackField.text == "")
				{
					feedbackField.text = TEXT_DEFAULT_FEEDBACK;
					setFeedbackTextToGrey(true);
				}
				onFieldFocus();
			}
			private function onFeedbackChange():void
			{
				data.feedback = feedbackField.text;
			}
			private function onAnswerFieldChange():void
			{
				data.text = answerField.text;
			}
			private function onPercentRollOut():void
			{
				unHighlightPercentField();
			}
			private function onPercentRollOver():void
			{
				highlightPercentField();
			}
			private function onPercentKeyDown(e:KeyboardEvent):void
			{
				if(e.keyCode == Keyboard.ENTER || e.keyCode == Keyboard.TAB || e.keyCode == Keyboard.ESCAPE)
				{
					onPercentFocusOut();
				}
			}
			private function onPercentChanged():void
			{
				data.percent = isolateNumbers(percentField.text);
				if(data.percent > 0)
				{
					checkbox1.selected = true;
				}
				else
				{
					checkbox1.selected = false;
				}
				//Dispatch ITEM_CHECKED event if this is a full right answer
				if(data.percent == 100)
				{
					dispatchEvent(new Event(ITEM_CHECKED, true));
				}
			}
			private function onPercentFocusIn():void
			{
				//percentField.text = isolateNumbers(percentField.text);
				percentField.setSelection(0, percentField.length - 1);
				onFieldFocus();
			}
			private function onPercentFocusOut():void
			{
				data.percent = isolateNumbers(percentField.text);
				percentField.text = data.percent + "%";
			}
			private function onCheckBoxChanged():void
			{
				updateCheckBox();
				data.percent = isolateNumbers(percentField.text);
				if(checkbox1.selected == true)
				{
					dispatchEvent(new Event(ITEM_CHECKED, true));
				}
			}
			private function onPlaceholderFocus():void
			{
				answerField.setFocus();
				setToFunctionalState();
				stage.focus = this;
				dispatchEvent(new Event(EVENT_ADD_NEW, true));
			}
			private function onKeyDown(e:KeyboardEvent):void
			{
				if(currentState == 'Placeholder' && e.keyCode == Keyboard.ENTER)
				{
					onPlaceholderFocus();
				}
			}
			private function onEffectEnd(event:EffectEvent):void
			{
				if(event.currentTarget == expandEffect)
				{
					expandTransition.effect = null;
				}
				else if(event.currentTarget == contractEffect)
				{
					contractTransition.effect = null;
				}
			}
		]]>
	</mx:Script>
</mx:Canvas>